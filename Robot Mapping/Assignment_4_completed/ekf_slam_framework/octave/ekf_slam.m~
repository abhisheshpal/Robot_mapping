% This is the main extended Kalman filter SLAM loop. This script calls all the required
% functions in the correct order.
%
% You can disable the plotting or change the number of steps the filter
% runs for to ease the debugging. You should however not change the order
% or calls of any of the other lines, as it might break the framework.
%
% If you are unsure about the input and return values of functions you
% should read their documentation which tells you the expected dimensions.

% Turn off pagination:
more off;

% clear all variables and close all windows
clear all;
close all;

% Make tools available
addpath('tools');

% Read world data, i.e. landmarks. The true landmark positions are not given to the robot
landmarks = read_world('../data/world.dat');
% load landmarks;
% Read sensor readings, i.e. odometry and range-bearing sensor
data = read_data('../data/sensor_data.dat');
%load data;

INF = 1000;
% Get the number of landmarks in the map
N = size(landmarks,2);

% observedLandmarks is a vector that keeps track of which landmarks have been observed so far.
% observedLandmarks(i) will be true if the landmark with id = i has been observed at some point by the robot
observedLandmarks = repmat(false,1,N);

% Initialize belief:
% mu: 2N+3x1 vector representing the mean of the normal distribution
% The first 3 components of mu correspond to the pose of the robot,
% and the landmark poses (xi, yi) are stacked in ascending id order.
% sigma: (2N+3)x(2N+3) covariance matrix of the normal distribution
mu = repmat([0.0], (2*N+3), 1);
robSigma = zeros(3);
robMapSigma = zeros(3,2*N);
mapSigma = INF*eye(2*N);
sigma = [[robSigma robMapSigma];[robMapSigma' mapSigma]];

% toogle the visualization type
showGui = true;  % show a window while the algorithm runs
%showGui = false; % plot to files instead

% Perform filter update for each odometry-observation pair read from the
% data file.
%for t = 1:size(data.timestep, 2)
for t = 1:50

    % Perform the prediction step of the EKF
    [mu, sigma] = prediction_step(mu, sigma, data.timestep(t).odometry);

m = size(data.timestep(t).sensor, 2); % making an array same as size of z with 2 columns 

% Z: vectorized form of all measurements made in this time step: [range_1; bearing_1; range_2; bearing_2; ...; range_m; bearing_m]
% ExpectedZ: vectorized form of all expected measurements in the same form.
% They are initialized here and should be filled out in the for loop below
Z = zeros(m*2, 1);
expectedZ = zeros(m*2, 1);
Error_observation = zeros(m*2,1);
diff_observation = zeros(m*2,1);
% Iterate over the measurements and compute the H matrix
% (stacked Jacobian blocks of the measurement function)
% H will be 2m x 2N+3
H = [];
Hi = zeros(2,21); 

    
    for i = 1:m
	% Get the id of the landmark corresponding to the i-th observation
	landmarkId = data.timestep(t).sensor(i).id;
	% If the landmark is obeserved for the first time:
	if(observedLandmarks(landmarkId)==false)
		% TODO: Initialize its pose in mu based on the measurement and the current robot pose:
		mu(2*landmarkId+2) = mu(1,1)+(data.timestep(t).sensor(i).range*cos(mu(3)+ data.timestep(t).sensor(i).bearing));
        mu(2*landmarkId+3) = mu(2,1)+(data.timestep(t).sensor(i).range*sin(mu(3)+ data.timestep(t).sensor(i).bearing));
		% Indicate in the observedLandmarks vector that this landmark has been observed
		observedLandmarks(landmarkId) = true;
    end

	% TODO: Add the landmark measurement to the Z vector
	Z ((2*i)-1,1) = data.timestep(t).sensor(i).range; 
    Z((2*i),1) = data.timestep(t).sensor(i).bearing;
	% TODO: Use the current estimate of the landmark pose to compute the corresponding expected measurement in expectedZ:
    
    sigx= mu(2*landmarkId+2)-mu(1,1); % expected pose x of landmark relative to robot
    sigy= mu(2*landmarkId+3)-mu(2,1); % expected pose y of landmark relative to robot
    Landmark_pose_array = [sigx ;sigy];   
    Q = Landmark_pose_array'*Landmark_pose_array;  % this formula also called squared Euclidean distance
    Q1 = sqrt(Q);                                  
    %expectedZ = [Q1; (atan2(sigy,sigx)-mu(3))];   % this is also called h(mu(t)) (h is a measurement function)
    expectedZ((2*i)-1,1) = Q1;   % this is also called h(mu(t)) (h is a measurement function)
    expectedZ((2*i),1) = atan2(sigy,sigx)-mu(3);
    
    % TODO: Compute the Jacobian Hi of the measurement function h for this observation Augment H with the new Hi
	   
    Hi(1:2 ,1:3) = 1/Q*[-Q1*sigx -Q1*sigy 0; Q1*sigx Q1*sigy sigy];
     
    Hi(1,2*landmarkId+2) =1/Q*(Q1)*sigx;
    Hi(2,2*landmarkId+2) =1/Q* (-sigy);

    Hi(1,2*landmarkId+3) =1/Q* Q1*sigy;
    Hi(2,2*landmarkId+3) =1/Q* sigx;
    
    Mx = zeros(5, mu_size);
    Mx(1:3,1:3) = eye(3);
    Mx(4,2*landmarkId+2) = 1;
    Mx(5,2*landmarkId+3) = 1;
    
    Hi = 1/q *[(-sqrt(q)*lambda_x) (-sqrt(q)*lambda_y) 0 sqrt(q)*lambda_x sqrt(q)*lambda_y;lambda_y (-lambda_x) (-q) (-lambda_y) lambda_x];
    H = [H;Hi];	
    
end
       
% TODO: Construct the sensor noise matrix Q
%Qt = zeros(m*2);
Qt = 0.01* eye(m*2);     % cosidered sensor noise as 0.1

% TODO: Compute the Kalman gain
K = sigma*H'/ (H*sigma*H'+ Qt);
% TODO: Compute the difference between the expected and recorded measurements.
diff_observation = normalize_all_bearings(Z-expectedZ);
Error_observation = K*(diff_observation);
% Remember to normalize the bearings after subtracting!

% (hint: use the normalize_all_bearings function available in tools)


% TODO: Finish the correction step by computing the new mu and sigma.
mu = mu + Error_observation;
sigma = (eye(size(K*H))-K*H)*sigma;
 
% Normalize theta in the robot pose.
mu(3) = normalize_angle(mu(3));
    % Perform the correction step of the EKF
    %[mu, sigma, observedLandmarks] = correction_step(mu, sigma, data.timestep(t).sensor, observedLandmarks);

    %Generate visualization plots of the current state of the filter
    plot_state(mu, sigma, landmarks, t, observedLandmarks, data.timestep(t).sensor, showGui);
    disp("Current state vector:")
    disp("mu = "), disp(mu)
end

disp("Final system covariance matrix:"), disp(sigma)
% Display the final state estimate
disp("Final robot pose:")
disp("mu_robot = "), disp(mu(1:3)), disp("sigma_robot = "), disp(sigma(1:3,1:3))
